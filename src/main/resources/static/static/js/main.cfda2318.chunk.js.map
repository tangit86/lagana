{"version":3,"sources":["api/gen/api.ts","api/gen/base.ts","formatters/formatters.js","views/Search.jsx","views/Logview.jsx","views/FeederView.jsx","views/schema/FormView.jsx","views/schema/View.jsx","views/schema/SchemaConfView.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["ConfigurationOverviewAllowedTypeOpMapEnum","FieldSchemaTypeEnum","IFeederOverviewFeederStateEnum","ILaganaFieldOutTypeEnum","ILaganaFieldOutSupportedOpsEnum","LaganaFilterOpEnum","ReaderSchemaFormatEnum","ReaderSchemaTypeEnum","BASE_PATH","replace","RequiredError","field","msg","name","Error","ApiControllerApiAxiosParamCreator","configuration","fetch","fetchRequest","a","options","localVarPath","localVarUrlObj","globalImportUrl","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","undefined","url","fetchFieldSuggestions","fieldId","encodeURIComponent","String","fetchSchema","get","getDashboards","dashboardNames","getOverview","feeders","setConf","configurationOverview","start","feeder","stop","ApiControllerApiFp","localVarAxiosArgs","axios","globalAxios","basePath","axiosRequestArgs","request","ApiControllerApiFactory","then","timeFormatter","timestamp","Date","moment","format","xmlFormat","require","xmlFormatter","xml","conf","xmlString","input","e","document","createElement","innerHTML","childNodes","length","nodeValue","htmlDecode","Search","props","apiClient","pollVar","state","isLive","allFields","initTimer","timer","toggleLive","bind","poll","nextState","this","setState","setInterval","clearInterval","updTimer","console","log","Button","variant","onClick","class","type","value","onChange","React","Component","Logview","logs","search","page","pageSize","filters","selectedIndex","selectedRow","loading","myRef","createRef","response","updState","map","f","error","payload","mapLogs","results","getElementsByClassName","item","scrollTop","row","columns","id","Header","accessor","maxWidth","Cell","getFieldFormatter","searchProps","logViewMinWidth","Container","fluid","Row","style","backgroundColor","Col","minWidth","className","sortable","showPagination","height","window","innerHeight","getTbodyProps","A","B","C","D","E","F","onScroll","b","c","d","getTrGroupProps","rowInfo","column","instance","rowKey","original","handleOriginal","cursor","background","color","hidden","border","Object","keys","key","formatter","val","width","fieldKey","filter","fType","k","values","forEach","valkey","v","kv","logObj","fn","vl","FeederView","getFeeders","mapFeeder","updFeeders","apiFeeder","targetSeries","feederState","FormView","isEdit","target","cols","onSave","align","col","cell","getFormValuesWrapper","editor","getStandardCellEditor","label","content","View","save","change","clone","delete","obj","title","tProps","rows","expandComponent","formViewProps","getExpandComponent","expandableRow","isHead","isKey","dataField","dataFormat","onClone","onDelete","href","count","actionFormatter","SchemaConfView","laganaApi","changed","readers","fields","matchers","uses","getSchema","saveItem","saveSchema","deleteItem","reapSchema","useKey","assign","objGroup","objKey","objVal","forceRender","getMatchers","disabled","multiFormatter","t","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cfda2318.chunk.js","sourcesContent":["// tslint:disable\n/**\n * OpenAPI definition\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface ConfigurationOverview\n */\nexport interface ConfigurationOverview {\n    /**\n     * \n     * @type {ReapSchema}\n     * @memberof ConfigurationOverview\n     */\n    reapSchema?: ReapSchema;\n    /**\n     * \n     * @type {{ [key: string]: Array<string>; }}\n     * @memberof ConfigurationOverview\n     */\n    allowedTypeOpMap?: { [key: string]: Array<string>; };\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ConfigurationOverviewAllowedTypeOpMapEnum {\n    EQ = 'EQ',\n    NOTEQ = 'NOTEQ',\n    CONTAINS = 'CONTAINS',\n    NOTCONTAINS = 'NOTCONTAINS',\n    IN = 'IN',\n    NOTIN = 'NOTIN',\n    EMPTY = 'EMPTY',\n    NOTEMPTY = 'NOTEMPTY',\n    LT = 'LT',\n    GT = 'GT',\n    BETWEEN = 'BETWEEN',\n    REGEX = 'REGEX'\n}\n\n/**\n * \n * @export\n * @interface Dashboard\n */\nexport interface Dashboard {\n    /**\n     * \n     * @type {string}\n     * @memberof Dashboard\n     */\n    id?: string;\n}\n/**\n * \n * @export\n * @interface FeederSchema\n */\nexport interface FeederSchema {\n    /**\n     * \n     * @type {string}\n     * @memberof FeederSchema\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeederSchema\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeederSchema\n     */\n    targetSystem?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeederSchema\n     */\n    reader?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeederSchema\n     */\n    matcher?: string;\n}\n/**\n * \n * @export\n * @interface FetchRequest\n */\nexport interface FetchRequest {\n    /**\n     * \n     * @type {number}\n     * @memberof FetchRequest\n     */\n    page?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof FetchRequest\n     */\n    pageSize?: number;\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof FetchRequest\n     */\n    select?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<LaganaFilter>}\n     * @memberof FetchRequest\n     */\n    filters?: Array<LaganaFilter>;\n}\n/**\n * \n * @export\n * @interface FetchResponse\n */\nexport interface FetchResponse {\n    /**\n     * \n     * @type {PaginatedLaganaSearchResult}\n     * @memberof FetchResponse\n     */\n    payload?: PaginatedLaganaSearchResult;\n}\n/**\n * \n * @export\n * @interface FieldSchema\n */\nexport interface FieldSchema {\n    /**\n     * \n     * @type {string}\n     * @memberof FieldSchema\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FieldSchema\n     */\n    type?: FieldSchemaTypeEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof FieldSchema\n     */\n    isIndex?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof FieldSchema\n     */\n    isSorted?: boolean;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum FieldSchemaTypeEnum {\n    STRING = 'STRING',\n    NUMERIC = 'NUMERIC',\n    BOOLEAN = 'BOOLEAN',\n    TIMESTAMP = 'TIMESTAMP',\n    XML = 'XML',\n    JSON = 'JSON'\n}\n\n/**\n * \n * @export\n * @interface IFeederOverview\n */\nexport interface IFeederOverview {\n    /**\n     * \n     * @type {string}\n     * @memberof IFeederOverview\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof IFeederOverview\n     */\n    feederState?: IFeederOverviewFeederStateEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof IFeederOverview\n     */\n    targetSeries?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum IFeederOverviewFeederStateEnum {\n    ACTIVE = 'ACTIVE',\n    WARNING = 'WARNING',\n    STOPPED = 'STOPPED'\n}\n\n/**\n * \n * @export\n * @interface ILaganaFieldOut\n */\nexport interface ILaganaFieldOut {\n    /**\n     * \n     * @type {string}\n     * @memberof ILaganaFieldOut\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ILaganaFieldOut\n     */\n    type?: ILaganaFieldOutTypeEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ILaganaFieldOut\n     */\n    supportedOps?: Array<ILaganaFieldOutSupportedOpsEnum>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ILaganaFieldOut\n     */\n    indexed?: boolean;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ILaganaFieldOutTypeEnum {\n    STRING = 'STRING',\n    NUMERIC = 'NUMERIC',\n    BOOLEAN = 'BOOLEAN',\n    TIMESTAMP = 'TIMESTAMP',\n    XML = 'XML',\n    JSON = 'JSON'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ILaganaFieldOutSupportedOpsEnum {\n    EQ = 'EQ',\n    NOTEQ = 'NOTEQ',\n    CONTAINS = 'CONTAINS',\n    NOTCONTAINS = 'NOTCONTAINS',\n    IN = 'IN',\n    NOTIN = 'NOTIN',\n    EMPTY = 'EMPTY',\n    NOTEMPTY = 'NOTEMPTY',\n    LT = 'LT',\n    GT = 'GT',\n    BETWEEN = 'BETWEEN',\n    REGEX = 'REGEX'\n}\n\n/**\n * \n * @export\n * @interface LaganaFilter\n */\nexport interface LaganaFilter {\n    /**\n     * \n     * @type {string}\n     * @memberof LaganaFilter\n     */\n    fieldName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LaganaFilter\n     */\n    op?: LaganaFilterOpEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof LaganaFilter\n     */\n    value?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum LaganaFilterOpEnum {\n    EQ = 'EQ',\n    NOTEQ = 'NOTEQ',\n    CONTAINS = 'CONTAINS',\n    NOTCONTAINS = 'NOTCONTAINS',\n    IN = 'IN',\n    NOTIN = 'NOTIN',\n    EMPTY = 'EMPTY',\n    NOTEMPTY = 'NOTEMPTY',\n    LT = 'LT',\n    GT = 'GT',\n    BETWEEN = 'BETWEEN',\n    REGEX = 'REGEX'\n}\n\n/**\n * \n * @export\n * @interface LaganaSearchResult\n */\nexport interface LaganaSearchResult {\n    /**\n     * \n     * @type {{ [key: string]: Array<LaganaSearchResultValue>; }}\n     * @memberof LaganaSearchResult\n     */\n    values?: { [key: string]: Array<LaganaSearchResultValue>; };\n}\n/**\n * \n * @export\n * @interface LaganaSearchResultValue\n */\nexport interface LaganaSearchResultValue {\n    /**\n     * \n     * @type {string}\n     * @memberof LaganaSearchResultValue\n     */\n    fn?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LaganaSearchResultValue\n     */\n    vl?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof LaganaSearchResultValue\n     */\n    sp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof LaganaSearchResultValue\n     */\n    ep?: number;\n}\n/**\n * \n * @export\n * @interface MatcherSchema\n */\nexport interface MatcherSchema {\n    /**\n     * \n     * @type {string}\n     * @memberof MatcherSchema\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MatcherSchema\n     */\n    field?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MatcherSchema\n     */\n    regex?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MatcherSchema\n     */\n    formatMatchValue?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MatcherSchema\n     */\n    defaultMatchValue?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof MatcherSchema\n     */\n    multilineAndinvert?: boolean;\n    /**\n     * \n     * @type {Array<MatcherSchema>}\n     * @memberof MatcherSchema\n     */\n    anyOf?: Array<MatcherSchema>;\n    /**\n     * \n     * @type {Array<MatcherSchema>}\n     * @memberof MatcherSchema\n     */\n    allOf?: Array<MatcherSchema>;\n}\n/**\n * \n * @export\n * @interface PaginatedLaganaSearchResult\n */\nexport interface PaginatedLaganaSearchResult {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLaganaSearchResult\n     */\n    page?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLaganaSearchResult\n     */\n    pageSize?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLaganaSearchResult\n     */\n    totalPages?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLaganaSearchResult\n     */\n    totalResults?: number;\n    /**\n     * \n     * @type {Array<LaganaSearchResult>}\n     * @memberof PaginatedLaganaSearchResult\n     */\n    results?: Array<LaganaSearchResult>;\n}\n/**\n * \n * @export\n * @interface ReaderSchema\n */\nexport interface ReaderSchema {\n    /**\n     * \n     * @type {string}\n     * @memberof ReaderSchema\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReaderSchema\n     */\n    source?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReaderSchema\n     */\n    format?: ReaderSchemaFormatEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ReaderSchema\n     */\n    type?: ReaderSchemaTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ReaderSchemaFormatEnum {\n    TEXT = 'TEXT',\n    JSON = 'JSON',\n    XML = 'XML'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ReaderSchemaTypeEnum {\n    CONSOLESTREAM = 'CONSOLE_STREAM',\n    FILE = 'FILE',\n    HTTP = 'HTTP'\n}\n\n/**\n * \n * @export\n * @interface ReapSchema\n */\nexport interface ReapSchema {\n    /**\n     * \n     * @type {Array<FieldSchema>}\n     * @memberof ReapSchema\n     */\n    fields?: Array<FieldSchema>;\n    /**\n     * \n     * @type {Array<FeederSchema>}\n     * @memberof ReapSchema\n     */\n    feeders?: Array<FeederSchema>;\n    /**\n     * \n     * @type {Array<MatcherSchema>}\n     * @memberof ReapSchema\n     */\n    matchers?: Array<MatcherSchema>;\n    /**\n     * \n     * @type {Array<ReaderSchema>}\n     * @memberof ReapSchema\n     */\n    readers?: Array<ReaderSchema>;\n}\n\n/**\n * ApiControllerApi - axios parameter creator\n * @export\n */\nexport const ApiControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {FetchRequest} [fetchRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetch: async (fetchRequest?: FetchRequest, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/fetch`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof fetchRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(fetchRequest !== undefined ? fetchRequest : {}) : (fetchRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} fieldId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchFieldSuggestions: async (fieldId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'fieldId' is not null or undefined\n            if (fieldId === null || fieldId === undefined) {\n                throw new RequiredError('fieldId','Required parameter fieldId was null or undefined when calling fetchFieldSuggestions.');\n            }\n            const localVarPath = `/api/fetch/suggestions/{fieldId}`\n                .replace(`{${\"fieldId\"}}`, encodeURIComponent(String(fieldId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchSchema: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/fetch/schema`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        get: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/conf`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {Array<string>} dashboardNames \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDashboards: async (dashboardNames: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'dashboardNames' is not null or undefined\n            if (dashboardNames === null || dashboardNames === undefined) {\n                throw new RequiredError('dashboardNames','Required parameter dashboardNames was null or undefined when calling getDashboards.');\n            }\n            const localVarPath = `/api/dashboards`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (dashboardNames) {\n                localVarQueryParameter['dashboardNames'] = dashboardNames;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {Array<string>} feeders \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOverview: async (feeders: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'feeders' is not null or undefined\n            if (feeders === null || feeders === undefined) {\n                throw new RequiredError('feeders','Required parameter feeders was null or undefined when calling getOverview.');\n            }\n            const localVarPath = `/api/feeder`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (feeders) {\n                localVarQueryParameter['feeders'] = feeders;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {ConfigurationOverview} [configurationOverview] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setConf: async (configurationOverview?: ConfigurationOverview, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/conf`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof configurationOverview !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(configurationOverview !== undefined ? configurationOverview : {}) : (configurationOverview || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        start: async (feeder: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'feeder' is not null or undefined\n            if (feeder === null || feeder === undefined) {\n                throw new RequiredError('feeder','Required parameter feeder was null or undefined when calling start.');\n            }\n            const localVarPath = `/api/feeder/{feeder}/start`\n                .replace(`{${\"feeder\"}}`, encodeURIComponent(String(feeder)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stop: async (feeder: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'feeder' is not null or undefined\n            if (feeder === null || feeder === undefined) {\n                throw new RequiredError('feeder','Required parameter feeder was null or undefined when calling stop.');\n            }\n            const localVarPath = `/api/feeder/{feeder}/stop`\n                .replace(`{${\"feeder\"}}`, encodeURIComponent(String(feeder)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ApiControllerApi - functional programming interface\n * @export\n */\nexport const ApiControllerApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {FetchRequest} [fetchRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetch(fetchRequest?: FetchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchResponse>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).fetch(fetchRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} fieldId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetchFieldSuggestions(fieldId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).fetchFieldSuggestions(fieldId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetchSchema(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ILaganaFieldOut>>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).fetchSchema(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async get(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurationOverview>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).get(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {Array<string>} dashboardNames \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getDashboards(dashboardNames: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Dashboard>>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).getDashboards(dashboardNames, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {Array<string>} feeders \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOverview(feeders: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IFeederOverview>>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).getOverview(feeders, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {ConfigurationOverview} [configurationOverview] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async setConf(configurationOverview?: ConfigurationOverview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).setConf(configurationOverview, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async start(feeder: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).start(feeder, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async stop(feeder: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).stop(feeder, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * ApiControllerApi - factory interface\n * @export\n */\nexport const ApiControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {FetchRequest} [fetchRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetch(fetchRequest?: FetchRequest, options?: any): AxiosPromise<FetchResponse> {\n            return ApiControllerApiFp(configuration).fetch(fetchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} fieldId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchFieldSuggestions(fieldId: string, options?: any): AxiosPromise<Array<object>> {\n            return ApiControllerApiFp(configuration).fetchFieldSuggestions(fieldId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchSchema(options?: any): AxiosPromise<Array<ILaganaFieldOut>> {\n            return ApiControllerApiFp(configuration).fetchSchema(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        get(options?: any): AxiosPromise<ConfigurationOverview> {\n            return ApiControllerApiFp(configuration).get(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {Array<string>} dashboardNames \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDashboards(dashboardNames: Array<string>, options?: any): AxiosPromise<Array<Dashboard>> {\n            return ApiControllerApiFp(configuration).getDashboards(dashboardNames, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {Array<string>} feeders \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOverview(feeders: Array<string>, options?: any): AxiosPromise<Array<IFeederOverview>> {\n            return ApiControllerApiFp(configuration).getOverview(feeders, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {ConfigurationOverview} [configurationOverview] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setConf(configurationOverview?: ConfigurationOverview, options?: any): AxiosPromise<void> {\n            return ApiControllerApiFp(configuration).setConf(configurationOverview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        start(feeder: string, options?: any): AxiosPromise<void> {\n            return ApiControllerApiFp(configuration).start(feeder, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stop(feeder: string, options?: any): AxiosPromise<void> {\n            return ApiControllerApiFp(configuration).stop(feeder, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ApiControllerApi - object-oriented interface\n * @export\n * @class ApiControllerApi\n * @extends {BaseAPI}\n */\nexport class ApiControllerApi extends BaseAPI {\n    /**\n     * \n     * @param {FetchRequest} [fetchRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public fetch(fetchRequest?: FetchRequest, options?: any) {\n        return ApiControllerApiFp(this.configuration).fetch(fetchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} fieldId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public fetchFieldSuggestions(fieldId: string, options?: any) {\n        return ApiControllerApiFp(this.configuration).fetchFieldSuggestions(fieldId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public fetchSchema(options?: any) {\n        return ApiControllerApiFp(this.configuration).fetchSchema(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public get(options?: any) {\n        return ApiControllerApiFp(this.configuration).get(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {Array<string>} dashboardNames \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public getDashboards(dashboardNames: Array<string>, options?: any) {\n        return ApiControllerApiFp(this.configuration).getDashboards(dashboardNames, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {Array<string>} feeders \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public getOverview(feeders: Array<string>, options?: any) {\n        return ApiControllerApiFp(this.configuration).getOverview(feeders, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {ConfigurationOverview} [configurationOverview] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public setConf(configurationOverview?: ConfigurationOverview, options?: any) {\n        return ApiControllerApiFp(this.configuration).setConf(configurationOverview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} feeder \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public start(feeder: string, options?: any) {\n        return ApiControllerApiFp(this.configuration).start(feeder, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} feeder \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public stop(feeder: string, options?: any) {\n        return ApiControllerApiFp(this.configuration).stop(feeder, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n","// tslint:disable\n/**\n * OpenAPI definition\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://localhost:3333\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","import React from 'react';\nimport moment from 'moment'\n\nexport const  timeFormatter = (timestamp)=>{\n\n    var a = new Date(timestamp*1);\n    return moment(a).format(\"ddd,DD-MMM HH:mm:ss.SSS\");\n}\n\n\nvar xmlFormat = require('xml-formatter');\nexport const xmlFormatter = (xml,conf)=>{\n  const xmlString = xmlFormat(xml,conf).replace(\">\",\"><br>\");\n  return (\n    <div>{htmlDecode(xmlString)}</div>\n  );\n}\n\n\nfunction htmlDecode(input){\n  var e = document.createElement('div');\n  e.innerHTML = input;\n  return e.childNodes.length === 0 ? \"\" : e.childNodes[0].nodeValue;\n}","import React from 'react';\nimport ReactTable from 'react-table-v6'\nimport 'react-table-v6/react-table.css'\nimport Button from 'react-bootstrap/Button'\nimport { timeConverter } from '../formatters/formatters'\nimport { ApiControllerApiFactory, IFeederOverview } from '../api/gen/index';\nimport { Container } from 'react-bootstrap';\n\nexport default class Search extends React.Component {\n\n    apiClient = null;\n\n    constructor(props){\n        super(props)\n        this.state = {\n             isLive:false,\n             allFields:this.props.allFields,\n             initTimer:5000,\n             timer:3000\n        }\n\n        this.apiClient = new ApiControllerApiFactory();\n        this.toggleLive = this.toggleLive.bind(this)\n        this.poll = this.poll.bind(this)\n    }\n\n    pollVar=null\n\n    toggleLive(){\n        const nextState =  !this.state.isLive\n        this.setState({ isLive: nextState, timer:this.state.initTimer })\n        this.pollVar = nextState ? setInterval(this.poll,1000) : clearInterval(this.pollVar);\n    }\n\n    poll(){\n        var updTimer = this.state.timer;\n        if(updTimer==0){\n            this.props.fetch()\n            updTimer = this.state.initTimer\n        }else{\n            updTimer-=1000;\n        }\n\n        this.setState({timer:updTimer})\n    }\n\n    render(){\n        console.log(this.pollVar,\"pollVar\")\n        return (<form>\n            <Button variant=\"info\" onClick={this.props.fetch}>Search</Button>\n            &nbsp;\n            <label class=\"switch\">\n                            <input type=\"checkbox\" value={this.state.isLive} onChange={this.toggleLive} />\n                            <span class=\"slider round\"></span>\n                        </label>\n                        <span>{this.state.isLive ? `Reload in ${this.state.timer/1000}s` : \"\"}</span>\n          </form>)\n    }\n}\n\n\n\n\nfunction getFilterView(filter){\n\n}\n\nfunction getFilterEdit(filter){\n\n}","import React from 'react';\nimport ReactTable from 'react-table-v6'\nimport 'react-table-v6/react-table.css'\nimport Button from 'react-bootstrap/Button'\nimport { ApiControllerApiFactory, IFeederOverview } from '../api/gen/index';\nimport Search from './Search';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { timeFormatter, xmlFormatter } from '../formatters/formatters'\n// import DataGrid from 'react-data-grid';\n// import 'react-data-grid/dist/react-data-grid.css';\n\n\nexport default class Logview extends React.Component {\n\n  apiClient = null;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      logs: [],\n      search: {\n        page: 1,\n        pageSize: 100,\n        filters: []\n      },\n      selectedIndex: null,\n      selectedRow: null,\n      loading: false,\n      allFields: []\n    }\n\n    this.apiClient = new ApiControllerApiFactory();\n    this.fetch = this.fetch.bind(this);\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.apiClient.fetchSchema().then(\n      (response) => {\n        const payload = response.data;\n\n        let updState = payload.map(f => f);\n        this.setState({ allFields: updState })\n      },\n      (error) => {\n        console.log(\"ERROR fetching schema\", error)\n      });\n  }\n\n\n  componentWillUnmount() {\n\n  }\n\n  fetch() {\n    this.setState({ loading: true })\n    this.apiClient.fetch({\n      page: this.state.search.page,\n      pageSize: this.state.search.pageSize,\n      filters: this.state.search.filters\n    }).then(\n      (data) => {\n        if (!data.data.payload) {\n          this.setState({ loading: false })\n          return\n        }\n        this.setState({\n          logs: mapLogs(data.data.payload.results),\n          loading: false\n        }, () => {\n          //tODO: use proper dimensions and dynamically\n          document.getElementsByClassName(\"rt-tbody\").item(0).scrollTop = this.state.logs.length > 15 ? (this.state.logs.length - 12) * 30 : 0;\n        })\n      }, (error) => {\n        this.setState({ loading: false })\n      }\n    )\n  }\n\n  render() {\n\n    const columns = [{\n      id: \"@timestamp\",\n      Header: 'Timestamp',\n      accessor: '@timestamp',\n      maxWidth: 150,\n      Cell: (props) => getFieldFormatter(\"@timestamp\", this.state.allFields)(props.row[\"@timestamp\"])\n    },\n    {\n      id: \"@source\",\n      Header: 'Source',\n      accessor: \"@source\",\n      maxWidth: 100\n    }, {\n      id: \"@content\",\n      Header: 'Content',\n      accessor: \"@content\"\n    }\n    ]\n\n\n    const searchProps = {\n      fetch: this.fetch,\n      state: this.state,\n      allFields: this.state.allFields\n    }\n\n\n\n    const logViewMinWidth = this.state.selectedIndex ? '70%' : '100%';\n    return (\n      <Container fluid>\n        <Row style={{ backgroundColor: 'silver' }}>\n          <Col style={{ minWidth: '80%' }}>\n            &nbsp;\n          </Col>\n          <Col className=\"justify-content-right align-items-right\">\n\n            <Search {...searchProps} />\n\n          </Col>\n        </Row>\n\n        <Row>\n          <Col id=\"mainCol\" style={{ minWidth: { logViewMinWidth } }}>\n            <ReactTable\n              sortable={false}\n              showPagination={false}\n              pageSize={100}\n              data={this.state.logs}\n              columns={columns}\n              loading={this.state.loading}\n              style={\n                { height: window.innerHeight }\n              }\n              className=\"-striped -highlight\"\n              getTbodyProps={(A, B, C, D, E, F) => {\n                return {\n                  onScroll: (a, b, c, d, e, f) => {\n                    console.log(\"A\", A, B, C, D, E, F)\n                    console.log(\"a\", a, b, c, d, e, f)\n                  }\n                }\n              }}\n              getTrGroupProps={(state, rowInfo, column, instance) => {\n                if (rowInfo !== undefined) {\n                  const rowKey = rowInfo.original['@timestamp'] + rowInfo.original['@source']\n                  return {\n                    onClick: (e, handleOriginal) => {\n                      console.log(instance)\n                      if (this.state.selectedIndex === rowKey) {\n                        this.setState({\n                          selectedIndex: null,\n                          selectedRow: null\n                        })\n                      }\n                      else {\n                        this.setState({\n                          selectedIndex: rowKey,\n                          selectedRow: rowInfo.original\n                        })\n                      }\n                    },\n                    style: {\n                      cursor: 'pointer',\n                      background: rowKey === this.state.selectedIndex ? '#00afec' : 'white',\n                      color: rowKey === this.state.selectedIndex ? 'white' : 'black'\n                    }\n                  }\n                }\n              }\n              }\n            />\n          </Col>\n          <Col id=\"infoCol\" hidden={!this.state.selectedIndex}>\n            {\n              this.state.selectedRow != null ? getRowDetails(this.state.selectedRow, this.state.allFields) : null\n            }\n          </Col>\n        </Row>\n\n      </Container>)\n  }\n}\n\nfunction getRowDetails(row, allFields) {\n  return (<table border=\"5px\">\n    {\n      Object.keys(row).map(key => {\n        const formatter = getFieldFormatter(key, allFields);\n        let val = formatter ? formatter(row[key]) : row[key]\n        console.log(\"formatter for field\",formatter,key)\n        return [<tr><td>{key}</td><td width=\"100%\" height=\"100%\">{val}</td></tr>]\n      })\n    }\n  </table>)\n}\n\nfunction getFieldFormatter(fieldKey, allFields) {\n  const filter = allFields.filter(f => f.name === fieldKey);\n\n  if (filter.length > 0) {\n    const fType = filter[0].type;\n\n    if (fType === \"TIMESTAMP\") {\n      return timeFormatter\n    }\n\n    if (fType === \"XML\") {\n      return xmlFormatter\n    }\n  }\n}\n\nfunction getFetchRequestFromState(state) {\n  return {\n    \"page\": 1,\n    \"pageSize\": 10,\n    \"select\": {},\n    \"filters\": [\n      {\n        \"fieldName\": \"@timestamp\",\n        \"op\": \"GT\",\n        \"value\": \"1234562134456\"\n      }\n    ]\n  }\n}\n\nfunction mapLogs(results) {\n\n  const logs = Object.keys(results).map(k => {\n    const values = results[k].values;\n    const log = {};\n\n    Object.keys(values).forEach(valkey => {\n      const v = values[valkey];\n      Object.keys(v).forEach(kv => {\n        const logObj = v[kv];\n        log[logObj.fn] = logObj.vl;\n      })\n    });\n    return log;\n  });\n  return logs;\n}","import React from 'react';\nimport ReactTable from 'react-table-v6'\nimport 'react-table-v6/react-table.css'\nimport { ApiControllerApiFactory, IFeederOverview } from '../api/gen/index';\nimport Button from 'react-bootstrap/Button'\n\nexport default class FeederView extends React.Component {\n    \n    apiClient = null;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            feeders: []\n        }\n\n        this.getFeeders = this.getFeeders.bind(this);\n        this.mapFeeder = this.mapFeeder.bind(this);\n        this.start = this.start.bind(this);\n        this.stop = this.stop.bind(this);\n        this.apiClient = new ApiControllerApiFactory();\n    }\n\n    componentDidMount() {\n        this.pollVar = setInterval(this.getFeeders, 1000);\n    }\n\n\n    componentWillUnmount(){\n        clearInterval(this.pollVar);\n        this.pollVar = null;\n    }\n\n    getFeeders() {\n        this.apiClient.getOverview(\"\").then(\n            (response) => {\n                const data = response.data;\n                const updFeeders = Object.keys(data).map(key => {\n                    return this.mapFeeder(data[key]);\n                });\n                this.setState({ feeders: updFeeders });\n            })\n    }\n\n    mapFeeder(apiFeeder) {\n        return {\n            name: apiFeeder.name,\n            targetSeries: apiFeeder.targetSeries,\n            feederState: apiFeeder.feederState\n        }\n    }\n\n    start(e) {\n        this.apiClient.start(e).then((data)=>{\n\n        },(error)=>{\n            console.log(\"ERROR\" ,error);\n        });\n    }\n\n    stop(e) {\n        this.apiClient.stop(e).then((data)=>{\n\n        },(error)=>{\n            console.log(\"ERROR\" ,error);\n        });\n    }\n\n    render() {\n\n        const columns = [{\n            id: \"name\",\n            Header: 'Name (ID)',\n            accessor: 'name'\n        }, {\n            id: \"targetSeries\",\n            Header: 'Target Series',\n            accessor: \"targetSeries\"\n        }, {\n            id: 'feederState',\n            Header: 'Status',\n            accessor: 'feederState'\n        },\n        {\n            id: 'action',\n            accessor: 'feederState',\n            Cell: (props) => {\n                if (props.value === 'STOPPED') {\n                    return (  <Button variant=\"success\" onClick={e=>this.start(props.row.name)}>Start</Button>)\n                }\n                return (  <Button variant=\"danger\" onClick={e=>this.stop(props.row.name)}>Stop</Button>)\n            }\n        }\n        ]\n\n        return <ReactTable\n            showPagination={false}\n            data={this.state.feeders}\n            columns={columns}\n        />\n    }\n}\n","import React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport { Container, Row, Col } from 'react-bootstrap'\n\nexport class FormView extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            isEdit: false\n        }\n\n        this.onChange = this.onChange.bind(this)\n    }\n\n    onChange(id,key,e){\n        this.props.onChange(id,key,e.target.value);\n    }\n\n    render() {\n        const row = this.props.row;\n        const cols = this.props.cols;\n        const onSave = this.props.onSave;\n        return (\n            <Container fluid=\"md\" style={{width:\"100%\"}}>\n                <Row>\n                    <Col ></Col>\n                    <Col ></Col>\n                    <Col ></Col>\n                    <Col style={{ align: 'right' }}>\n                        <label class=\"switch\">\n                            <input type=\"checkbox\" value={this.state.isEdit} onChange={() => { this.setState({ isEdit: !this.state.isEdit }) }} />\n                            <span class=\"slider round\"></span>\n                        </label>\n                        <span>{this.state.isEdit ? \"Edit mode\" : \"View mode\"}</span>\n                    </Col>\n                </Row>\n                {\n                    cols.map(col => {\n                        const cell = row[col.id];\n                        return [<Row fluid=\"md\">\n                            {\n                                this.state.isEdit ?\n                                    getFormValuesWrapper(col.id, col.editor ? col.editor(cell) : getStandardCellEditor(cell,(e)=>this.onChange(row.name,col.id,e)))\n                                    :\n                                    getFormValuesWrapper(col.id, col.formatter ? col.formatter(cell) : getStandardCellFormat(cell))\n                            }\n                        </Row>]\n                    })\n                }\n            </Container>\n        )\n    }\n}\n\n\nfunction getStandardCellFormat(cell) {\n    return cell;\n}\n\n\nfunction getStandardCellEditor(cell,onChange) {\n    return (<input width=\"box-sizing: border-box;\" type=\"text\" value={cell} onChange={(e)=>onChange(e)}/>);\n}\n\n\n\nfunction getFormValuesWrapper(label, content) {\n    return (<fieldset class=\"scheduler-border\" width=\"box-sizing: border-box;%\">\n        <legend class=\"scheduler-border\">{label}</legend>\n        <div class=\"control-group\">\n            <div class=\"controls bootstrap-timepicker\">\n                {content}\n            </div>\n        </div>\n    </fieldset>)\n}","import React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport { Container, Row, Col } from 'react-bootstrap'\nimport { FormView } from './FormView'\n\n\n\nexport default class View extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.save = this.save.bind(this);\n        this.change = this.change.bind(this);\n        this.clone = this.clone.bind(this);\n        this.delete = this.delete.bind(this);\n    }\n\n   change(id,key,value){\n       this.props.onChange(this.props.id,id,key,value);\n   }\n\n    save(obj) {\n        console.log(\"on save called....\",this.props.title,obj)\n    }\n\n    delete() {\n\n    }\n\n    clone() {\n\n    }\n\n    render() {\n        const tProps = this.props;\n        return (\n            <Container fluid>\n                <Row>\n                    <Col style={{ width: \"100%\" }}>\n                        <h1>{tProps.title}</h1>\n                        <BootstrapTable data={tProps.rows} expandComponent={(row) => getExpandComponent(row,tProps,this.change,this.save)} expandableRow={() => { return true }}>\n                            {\n                                tProps.cols.map(col => {\n                                    if (col.isHead) {\n                                        return [<TableHeaderColumn\n                                            isKey={col.isKey}\n                                            width={col.isKey ? 500 : undefined}\n                                            dataField={col.id}\n                                            dataFormat={col.formatter ? (cell, row) => col.formatter(cell) : undefined}\n                                        >{col.id}</TableHeaderColumn>]\n                                    }\n                                })\n                            }\n                            <TableHeaderColumn width=\"200px\" dataFormat={(cell, row, onClone, onDelete) => actionFormatter(cell, row, this.clone, this.delete)}></TableHeaderColumn>\n                        </BootstrapTable>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\n\nfunction getExpandComponent(row,tProps,onChange,onSave) {    \n    const formViewProps = {\n        row: row,\n        cols: tProps.cols,\n        onChange: onChange,\n        onSave:onSave\n    }\n    return (\n        formViewProps.cols ? <FormView {...formViewProps} /> : null\n    )\n}\n\nfunction actionFormatter(cell, row, onClone, onDelete) {\n    return (\n        <div>\n            <a href=\"#\" onClick={(e) => onClone(row)}>Clone</a> | <a href=\"#\" onClick={(e) => onDelete(row)}>Delete</a> <span title={\"Total uses of element in the schema: \" + row.count}>({row.count})</span>\n        </div>\n    )\n}\n\n\n\n\nclass SelectorEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        console.log(\"multi props\", props)\n        this.state = {\n            selected: this.props.defaultValue\n        }\n    }\n\n\n    onChange(e) {\n        console.log(e);\n        this.state.selected.push(e.target.id);\n    }\n\n    render() {\n        const dataSource = [];\n        if (this.props.dataSource) {\n            dataSource = this.props.dataSource;\n        }\n        return (\n            <select name={1} id=\"multiSelector\" multiple={true} onChange={this.onChange}>\n                {\n                    dataSource.map(m => {\n                        const isSelected = this.state.selected.filter(f => f.name === m.name);\n                        return [<option selected={isSelected} value={m.name}>{m.name}</option>]\n                    })\n                }\n            </select>\n        )\n    }\n}\n\n","import React from 'react';\n//import {apiCall, getConfOveriview, saveConfOverview } from '../api/client';\nimport Button from 'react-bootstrap/Button'\nimport { ApiControllerApiFactory, FeederSchema } from '../../api/gen/index';\nimport { Tabs, Tab, TabPanel, TabList } from 'react-tabs';\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\nimport { Container, Row, Col } from 'react-bootstrap'\nimport View from './View'\n\nexport default class SchemaConfView extends React.Component {\n\n    laganaApi = null;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            changed: false,\n            feeders: {},\n            readers: {},\n            fields: {},\n            matchers: {},\n            uses: {}\n        };\n\n        this.getSchema = this.getSchema.bind(this);\n        this.saveItem = this.saveItem.bind(this);\n        this.change = this.change.bind(this);\n        this.saveSchema = this.saveSchema.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n        this.laganaApi = new ApiControllerApiFactory();\n    }\n\n\n    componentDidMount() {\n        this.getSchema();\n    }\n\n    async getSchema() {\n        this.laganaApi.get().then(\n            (data) => {\n                const payload = data.data.reapSchema;\n                let updState = {\n                    changed: false,\n                    feeders: {},\n                    readers: {},\n                    fields: {},\n                    matchers: {},\n                    uses: {}\n                }\n                Object.keys(payload).forEach(key => {\n                    const items = payload[key];\n                    items.forEach(item => {\n                        updState[key][item.name] = item;\n                        const useKey = key + \"_\" + item.name;\n                        if (!updState['uses'][useKey]) {\n                            updState['uses'][useKey] = 0;\n                        }\n                        updState['uses'][useKey] += 1;\n                    })\n                });\n                console.log(\"updState\", updState)\n                this.setState(updState)\n            });\n    }\n\n    saveSchema() {\n        this.laganaApi.setConf({\n            feeders: this.state.feeders,\n            readers: this.state.readers,\n            fields: this.state.fields,\n            matchers: this.state.matchers\n        })\n    }\n\n    saveItem(type, key, obj) {\n        console.log(\"saveItem \", type, key, obj)\n        const updState = Object.assign({}, this.state);\n        const existing = updState[type]\n        existing[key] = obj;\n        updState[\"changed\"] = true;\n        console.log(updState, \" UPD STATE\")\n        this.setState(updState)\n    }\n\n    deleteItem(type, key) {\n        console.log(\"going to delete>\", type, key)\n    }\n\n    change(objGroup, objKey, fieldKey, objVal) {\n        console.log(\"CHANGE: \", objGroup, objKey, fieldKey, objVal)\n        let updState = Object.assign({}, this.state[objGroup])\n        let item = Object.assign({}, updState[objKey])\n        item[fieldKey] = objVal;\n        updState[objKey] = item;\n        this.setState({\n            \"changed\": true,\n            updState\n        });\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <Tabs>\n                    <TabList>\n                        <Tab>Feeders</Tab>\n                        <Tab>Matchers</Tab>\n                        <Tab>Readers</Tab>\n                        <Tab>Fields</Tab>\n                    </TabList>\n                    <TabPanel forceRender={true}>{getMatchers(this.props, this.state.matchers, this.change, this.saveItem, this.deleteItem)}</TabPanel>\n                    <TabPanel>{getMatchers(this.props, this.state.matchers, this.change, this.saveItem, this.deleteItem)}</TabPanel>\n                    <TabPanel>ok</TabPanel>\n                    <TabPanel>ok</TabPanel>\n                </Tabs>\n                <Row>\n                    <Col></Col>\n                    <Col>\n                        <Button variant=\"success\" onClick={this.saveSchema} disabled={!this.state.changed}>Save</Button>\n                    </Col>\n                    <Col></Col>\n                </Row>\n\n            </Container>\n\n        )\n    }\n}\n\n\nfunction getMatchers(props, matchers, onChange, onSave, onDelete) {\n\n    const tProps = {\n        id: \"matchers\",\n        title: \"Matchers\",\n        key: \"name\",\n        cols: [\n            {\n                id: \"name\",\n                isKey: true,\n                isHead: true\n            },\n            {\n                id: \"description\",\n                isHead: true\n            },\n            {\n                id: \"field\",\n                isHead: true\n            },\n            {\n                id: \"regex\"\n            },\n            {\n                id: \"formatMatchValue\"\n            },\n            {\n                id: \"defaultMatchValue\"\n            }, {\n                id: \"multilineAndInvert\"\n            },\n            {\n                id: \"allOf\",\n                formatter: (obj) => { return multiFormatter(obj) },\n                editor: (row) => { },\n                isHead: true\n            },\n            {\n                id: \"anyOf\",\n                formatter: (obj) => { return multiFormatter(obj) },\n                editor: (row) => { },\n            }\n        ],\n        rows: Object.keys(matchers).map(f => { return matchers[f] }),\n        onSave: onSave,\n        onChange: onChange,\n        onDelete: onDelete\n    }\n    return (<View {...tProps} />)\n}\n\nfunction multiFormatter(obj) {\n    return (<ul>\n\n        {\n            obj.map(t => {\n                return [<li><span class=\"tag\" background=\"red\">{t}</span></li>]\n            })\n        }\n\n    </ul>)\n}","import React from 'react';\nimport {Tabs,Tab,TabPanel,TabList} from 'react-tabs';\nimport './App.css';\nimport './xmlFormatter.css';\nimport 'react-tabs/style/react-tabs.css';\nimport Logview from './views/Logview';\nimport FeederView from './views/FeederView';\nimport SchemaConfView from './views/schema/SchemaConfView';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App(){\n\n    return ( <Tabs>\n      <TabList>\n        <Tab>Logs</Tab>\n        <Tab>Feeder Status</Tab>\n        <Tab>Configuration</Tab>\n      </TabList>\n      <TabPanel forceRender><Logview/></TabPanel>\n      <TabPanel><FeederView/></TabPanel>\n      <TabPanel><SchemaConfView/></TabPanel>\n    </Tabs>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}