{"version":3,"sources":["api/gen/api.ts","api/gen/base.ts","formatters/formatters.js","views/Search.jsx","views/Logview.jsx","views/FeederView.jsx","views/schema/FormView.jsx","views/schema/View.jsx","views/schema/SchemaConfView.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["ConfigurationOverviewAllowedTypeOpMapEnum","FieldSchemaTypeEnum","IFeederOverviewFeederStateEnum","ILaganaFieldOutTypeEnum","ILaganaFieldOutSupportedOpsEnum","LaganaFilterOpEnum","ReaderSchemaFormatEnum","ReaderSchemaTypeEnum","BASE_PATH","replace","RequiredError","field","msg","name","Error","ApiControllerApiAxiosParamCreator","configuration","clear","feeder","a","options","undefined","localVarPath","encodeURIComponent","String","localVarUrlObj","globalImportUrl","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","headersFromBaseOptions","headers","url","fetch","fetchRequest","needsSerialization","data","JSON","stringify","fetchFieldSuggestions","fieldId","fetchSchema","get","getDashboards","dashboardNames","getOverview","feeders","register","setConf","configurationOverview","start","stop","unregister","ApiControllerApiFp","localVarAxiosArgs","axios","globalAxios","basePath","axiosRequestArgs","request","ApiControllerApiFactory","then","timeFormatter","timestamp","Date","moment","format","xmlFormatter","require","xml","conf","style","boxSizing","formatted","pad","split","forEach","node","indent","match","padding","i","formatXml","Search","props","apiClient","pollVar","state","isLive","allFields","initTimer","timer","toggleLive","bind","poll","nextState","this","setState","setInterval","clearInterval","updTimer","console","log","Button","variant","onClick","class","type","value","onChange","React","Component","Logview","logs","search","page","pageSize","filters","selectedIndex","selectedRow","loading","myRef","createRef","response","updState","map","f","error","payload","mapLogs","results","length","document","getElementsByClassName","item","scrollTop","row","columns","id","Header","accessor","maxWidth","Cell","getFieldFormatter","searchProps","logViewMinWidth","Container","fluid","Row","backgroundColor","Col","minWidth","className","sortable","showPagination","height","window","innerHeight","getTbodyProps","A","B","C","D","E","F","onScroll","b","c","d","e","getTrGroupProps","rowInfo","column","instance","rowKey","original","handleOriginal","cursor","background","color","hidden","border","Object","keys","key","formatter","val","width","fieldKey","filter","fType","x","k","values","valkey","v","kv","logObj","fn","vl","FeederView","getFeeders","mapFeeder","updFeeders","apiFeeder","targetSeries","feederState","FormView","isEdit","target","cols","onSave","align","col","cell","getFormValuesWrapper","editor","getStandardCellEditor","getStandardCellFormat","getBooleanCellFormat","getBooleanCellEditor","label","content","View","save","change","clone","delete","obj","title","tProps","rows","expandComponent","formViewProps","getExpandComponent","expandableRow","isHead","isKey","dataField","dataFormat","dataSort","isSortable","sorta","onClone","onDelete","href","count","actionFormatter","SchemaConfView","laganaApi","changed","readers","fields","matchers","uses","getSchema","saveItem","saveSchema","deleteItem","reapSchema","useKey","assign","objGroup","objKey","objVal","forceRender","matchersDs","readersDs","multiEditor","multiFormatter","getMatchers","disabled","t","dataSource","isMulti","o","App","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","catch","message"],"mappings":"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","file":"static/js/main.9b14b936.chunk.js","sourcesContent":["// tslint:disable\n/**\n * OpenAPI definition\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface ConfigurationOverview\n */\nexport interface ConfigurationOverview {\n    /**\n     * \n     * @type {ReapSchema}\n     * @memberof ConfigurationOverview\n     */\n    reapSchema?: ReapSchema;\n    /**\n     * \n     * @type {{ [key: string]: Array<string>; }}\n     * @memberof ConfigurationOverview\n     */\n    allowedTypeOpMap?: { [key: string]: Array<string>; };\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ConfigurationOverviewAllowedTypeOpMapEnum {\n    EQ = 'EQ',\n    NOTEQ = 'NOTEQ',\n    CONTAINS = 'CONTAINS',\n    NOTCONTAINS = 'NOTCONTAINS',\n    IN = 'IN',\n    NOTIN = 'NOTIN',\n    EMPTY = 'EMPTY',\n    NOTEMPTY = 'NOTEMPTY',\n    LT = 'LT',\n    GT = 'GT',\n    BETWEEN = 'BETWEEN',\n    REGEX = 'REGEX'\n}\n\n/**\n * \n * @export\n * @interface Dashboard\n */\nexport interface Dashboard {\n    /**\n     * \n     * @type {string}\n     * @memberof Dashboard\n     */\n    id?: string;\n}\n/**\n * \n * @export\n * @interface FeederSchema\n */\nexport interface FeederSchema {\n    /**\n     * \n     * @type {string}\n     * @memberof FeederSchema\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeederSchema\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeederSchema\n     */\n    targetSystem?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeederSchema\n     */\n    reader?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeederSchema\n     */\n    matcher?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof FeederSchema\n     */\n    isRegistered?: boolean;\n}\n/**\n * \n * @export\n * @interface FetchRequest\n */\nexport interface FetchRequest {\n    /**\n     * \n     * @type {number}\n     * @memberof FetchRequest\n     */\n    page?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof FetchRequest\n     */\n    pageSize?: number;\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof FetchRequest\n     */\n    select?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<LaganaFilter>}\n     * @memberof FetchRequest\n     */\n    filters?: Array<LaganaFilter>;\n}\n/**\n * \n * @export\n * @interface FetchResponse\n */\nexport interface FetchResponse {\n    /**\n     * \n     * @type {PaginatedLaganaSearchResult}\n     * @memberof FetchResponse\n     */\n    payload?: PaginatedLaganaSearchResult;\n}\n/**\n * \n * @export\n * @interface FieldSchema\n */\nexport interface FieldSchema {\n    /**\n     * \n     * @type {string}\n     * @memberof FieldSchema\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FieldSchema\n     */\n    type?: FieldSchemaTypeEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof FieldSchema\n     */\n    isIndex?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof FieldSchema\n     */\n    isSorted?: boolean;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum FieldSchemaTypeEnum {\n    STRING = 'STRING',\n    NUMERIC = 'NUMERIC',\n    BOOLEAN = 'BOOLEAN',\n    TIMESTAMP = 'TIMESTAMP',\n    XML = 'XML',\n    JSON = 'JSON'\n}\n\n/**\n * \n * @export\n * @interface IFeederOverview\n */\nexport interface IFeederOverview {\n    /**\n     * \n     * @type {string}\n     * @memberof IFeederOverview\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof IFeederOverview\n     */\n    feederState?: IFeederOverviewFeederStateEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof IFeederOverview\n     */\n    targetSeries?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum IFeederOverviewFeederStateEnum {\n    ACTIVE = 'ACTIVE',\n    WARNING = 'WARNING',\n    STOPPED = 'STOPPED'\n}\n\n/**\n * \n * @export\n * @interface ILaganaFieldOut\n */\nexport interface ILaganaFieldOut {\n    /**\n     * \n     * @type {string}\n     * @memberof ILaganaFieldOut\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ILaganaFieldOut\n     */\n    type?: ILaganaFieldOutTypeEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ILaganaFieldOut\n     */\n    supportedOps?: Array<ILaganaFieldOutSupportedOpsEnum>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ILaganaFieldOut\n     */\n    indexed?: boolean;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ILaganaFieldOutTypeEnum {\n    STRING = 'STRING',\n    NUMERIC = 'NUMERIC',\n    BOOLEAN = 'BOOLEAN',\n    TIMESTAMP = 'TIMESTAMP',\n    XML = 'XML',\n    JSON = 'JSON'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ILaganaFieldOutSupportedOpsEnum {\n    EQ = 'EQ',\n    NOTEQ = 'NOTEQ',\n    CONTAINS = 'CONTAINS',\n    NOTCONTAINS = 'NOTCONTAINS',\n    IN = 'IN',\n    NOTIN = 'NOTIN',\n    EMPTY = 'EMPTY',\n    NOTEMPTY = 'NOTEMPTY',\n    LT = 'LT',\n    GT = 'GT',\n    BETWEEN = 'BETWEEN',\n    REGEX = 'REGEX'\n}\n\n/**\n * \n * @export\n * @interface LaganaFilter\n */\nexport interface LaganaFilter {\n    /**\n     * \n     * @type {string}\n     * @memberof LaganaFilter\n     */\n    fieldName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LaganaFilter\n     */\n    op?: LaganaFilterOpEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof LaganaFilter\n     */\n    value?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum LaganaFilterOpEnum {\n    EQ = 'EQ',\n    NOTEQ = 'NOTEQ',\n    CONTAINS = 'CONTAINS',\n    NOTCONTAINS = 'NOTCONTAINS',\n    IN = 'IN',\n    NOTIN = 'NOTIN',\n    EMPTY = 'EMPTY',\n    NOTEMPTY = 'NOTEMPTY',\n    LT = 'LT',\n    GT = 'GT',\n    BETWEEN = 'BETWEEN',\n    REGEX = 'REGEX'\n}\n\n/**\n * \n * @export\n * @interface LaganaSearchResult\n */\nexport interface LaganaSearchResult {\n    /**\n     * \n     * @type {{ [key: string]: Array<LaganaSearchResultValue>; }}\n     * @memberof LaganaSearchResult\n     */\n    values?: { [key: string]: Array<LaganaSearchResultValue>; };\n}\n/**\n * \n * @export\n * @interface LaganaSearchResultValue\n */\nexport interface LaganaSearchResultValue {\n    /**\n     * \n     * @type {string}\n     * @memberof LaganaSearchResultValue\n     */\n    fn?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LaganaSearchResultValue\n     */\n    vl?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof LaganaSearchResultValue\n     */\n    sp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof LaganaSearchResultValue\n     */\n    ep?: number;\n}\n/**\n * \n * @export\n * @interface MatcherSchema\n */\nexport interface MatcherSchema {\n    /**\n     * \n     * @type {string}\n     * @memberof MatcherSchema\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MatcherSchema\n     */\n    field?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MatcherSchema\n     */\n    regex?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MatcherSchema\n     */\n    formatMatchValue?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MatcherSchema\n     */\n    defaultMatchValue?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof MatcherSchema\n     */\n    multilineAndinvert?: boolean;\n    /**\n     * \n     * @type {Array<MatcherSchema>}\n     * @memberof MatcherSchema\n     */\n    anyOf?: Array<MatcherSchema>;\n    /**\n     * \n     * @type {Array<MatcherSchema>}\n     * @memberof MatcherSchema\n     */\n    allOf?: Array<MatcherSchema>;\n}\n/**\n * \n * @export\n * @interface PaginatedLaganaSearchResult\n */\nexport interface PaginatedLaganaSearchResult {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLaganaSearchResult\n     */\n    page?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLaganaSearchResult\n     */\n    pageSize?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLaganaSearchResult\n     */\n    totalPages?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLaganaSearchResult\n     */\n    totalResults?: number;\n    /**\n     * \n     * @type {Array<LaganaSearchResult>}\n     * @memberof PaginatedLaganaSearchResult\n     */\n    results?: Array<LaganaSearchResult>;\n}\n/**\n * \n * @export\n * @interface ReaderSchema\n */\nexport interface ReaderSchema {\n    /**\n     * \n     * @type {string}\n     * @memberof ReaderSchema\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReaderSchema\n     */\n    series?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReaderSchema\n     */\n    format?: ReaderSchemaFormatEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ReaderSchema\n     */\n    type?: ReaderSchemaTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ReaderSchemaFormatEnum {\n    TEXT = 'TEXT',\n    JSON = 'JSON',\n    XML = 'XML'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ReaderSchemaTypeEnum {\n    CONSOLESTREAM = 'CONSOLE_STREAM',\n    FILE = 'FILE',\n    HTTP = 'HTTP'\n}\n\n/**\n * \n * @export\n * @interface ReapSchema\n */\nexport interface ReapSchema {\n    /**\n     * \n     * @type {Array<FieldSchema>}\n     * @memberof ReapSchema\n     */\n    fields?: Array<FieldSchema>;\n    /**\n     * \n     * @type {Array<FeederSchema>}\n     * @memberof ReapSchema\n     */\n    feeders?: Array<FeederSchema>;\n    /**\n     * \n     * @type {Array<MatcherSchema>}\n     * @memberof ReapSchema\n     */\n    matchers?: Array<MatcherSchema>;\n    /**\n     * \n     * @type {Array<ReaderSchema>}\n     * @memberof ReapSchema\n     */\n    readers?: Array<ReaderSchema>;\n}\n\n/**\n * ApiControllerApi - axios parameter creator\n * @export\n */\nexport const ApiControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        clear: async (feeder: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'feeder' is not null or undefined\n            if (feeder === null || feeder === undefined) {\n                throw new RequiredError('feeder','Required parameter feeder was null or undefined when calling clear.');\n            }\n            const localVarPath = `/api/feeder/{feeder}/clear`\n                .replace(`{${\"feeder\"}}`, encodeURIComponent(String(feeder)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {FetchRequest} [fetchRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetch: async (fetchRequest?: FetchRequest, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/fetch`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof fetchRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(fetchRequest !== undefined ? fetchRequest : {}) : (fetchRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} fieldId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchFieldSuggestions: async (fieldId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'fieldId' is not null or undefined\n            if (fieldId === null || fieldId === undefined) {\n                throw new RequiredError('fieldId','Required parameter fieldId was null or undefined when calling fetchFieldSuggestions.');\n            }\n            const localVarPath = `/api/fetch/suggestions/{fieldId}`\n                .replace(`{${\"fieldId\"}}`, encodeURIComponent(String(fieldId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchSchema: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/fetch/schema`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        get: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/conf`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {Array<string>} dashboardNames \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDashboards: async (dashboardNames: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'dashboardNames' is not null or undefined\n            if (dashboardNames === null || dashboardNames === undefined) {\n                throw new RequiredError('dashboardNames','Required parameter dashboardNames was null or undefined when calling getDashboards.');\n            }\n            const localVarPath = `/api/dashboards`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (dashboardNames) {\n                localVarQueryParameter['dashboardNames'] = dashboardNames;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {Array<string>} feeders \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOverview: async (feeders: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'feeders' is not null or undefined\n            if (feeders === null || feeders === undefined) {\n                throw new RequiredError('feeders','Required parameter feeders was null or undefined when calling getOverview.');\n            }\n            const localVarPath = `/api/feeder`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (feeders) {\n                localVarQueryParameter['feeders'] = feeders;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register: async (feeder: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'feeder' is not null or undefined\n            if (feeder === null || feeder === undefined) {\n                throw new RequiredError('feeder','Required parameter feeder was null or undefined when calling register.');\n            }\n            const localVarPath = `/api/feeder/{feeder}/register`\n                .replace(`{${\"feeder\"}}`, encodeURIComponent(String(feeder)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {ConfigurationOverview} [configurationOverview] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setConf: async (configurationOverview?: ConfigurationOverview, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/conf`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof configurationOverview !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(configurationOverview !== undefined ? configurationOverview : {}) : (configurationOverview || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        start: async (feeder: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'feeder' is not null or undefined\n            if (feeder === null || feeder === undefined) {\n                throw new RequiredError('feeder','Required parameter feeder was null or undefined when calling start.');\n            }\n            const localVarPath = `/api/feeder/{feeder}/start`\n                .replace(`{${\"feeder\"}}`, encodeURIComponent(String(feeder)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stop: async (feeder: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'feeder' is not null or undefined\n            if (feeder === null || feeder === undefined) {\n                throw new RequiredError('feeder','Required parameter feeder was null or undefined when calling stop.');\n            }\n            const localVarPath = `/api/feeder/{feeder}/stop`\n                .replace(`{${\"feeder\"}}`, encodeURIComponent(String(feeder)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unregister: async (feeder: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'feeder' is not null or undefined\n            if (feeder === null || feeder === undefined) {\n                throw new RequiredError('feeder','Required parameter feeder was null or undefined when calling unregister.');\n            }\n            const localVarPath = `/api/feeder/{feeder}/unregister`\n                .replace(`{${\"feeder\"}}`, encodeURIComponent(String(feeder)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ApiControllerApi - functional programming interface\n * @export\n */\nexport const ApiControllerApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async clear(feeder: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).clear(feeder, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {FetchRequest} [fetchRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetch(fetchRequest?: FetchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchResponse>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).fetch(fetchRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} fieldId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetchFieldSuggestions(fieldId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).fetchFieldSuggestions(fieldId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetchSchema(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ILaganaFieldOut>>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).fetchSchema(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async get(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurationOverview>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).get(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {Array<string>} dashboardNames \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getDashboards(dashboardNames: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Dashboard>>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).getDashboards(dashboardNames, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {Array<string>} feeders \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOverview(feeders: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IFeederOverview>>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).getOverview(feeders, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async register(feeder: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).register(feeder, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {ConfigurationOverview} [configurationOverview] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async setConf(configurationOverview?: ConfigurationOverview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).setConf(configurationOverview, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async start(feeder: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).start(feeder, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async stop(feeder: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).stop(feeder, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unregister(feeder: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await ApiControllerApiAxiosParamCreator(configuration).unregister(feeder, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * ApiControllerApi - factory interface\n * @export\n */\nexport const ApiControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        clear(feeder: string, options?: any): AxiosPromise<void> {\n            return ApiControllerApiFp(configuration).clear(feeder, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {FetchRequest} [fetchRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetch(fetchRequest?: FetchRequest, options?: any): AxiosPromise<FetchResponse> {\n            return ApiControllerApiFp(configuration).fetch(fetchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} fieldId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchFieldSuggestions(fieldId: string, options?: any): AxiosPromise<Array<object>> {\n            return ApiControllerApiFp(configuration).fetchFieldSuggestions(fieldId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchSchema(options?: any): AxiosPromise<Array<ILaganaFieldOut>> {\n            return ApiControllerApiFp(configuration).fetchSchema(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        get(options?: any): AxiosPromise<ConfigurationOverview> {\n            return ApiControllerApiFp(configuration).get(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {Array<string>} dashboardNames \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDashboards(dashboardNames: Array<string>, options?: any): AxiosPromise<Array<Dashboard>> {\n            return ApiControllerApiFp(configuration).getDashboards(dashboardNames, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {Array<string>} feeders \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOverview(feeders: Array<string>, options?: any): AxiosPromise<Array<IFeederOverview>> {\n            return ApiControllerApiFp(configuration).getOverview(feeders, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register(feeder: string, options?: any): AxiosPromise<void> {\n            return ApiControllerApiFp(configuration).register(feeder, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {ConfigurationOverview} [configurationOverview] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setConf(configurationOverview?: ConfigurationOverview, options?: any): AxiosPromise<void> {\n            return ApiControllerApiFp(configuration).setConf(configurationOverview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        start(feeder: string, options?: any): AxiosPromise<void> {\n            return ApiControllerApiFp(configuration).start(feeder, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stop(feeder: string, options?: any): AxiosPromise<void> {\n            return ApiControllerApiFp(configuration).stop(feeder, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} feeder \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unregister(feeder: string, options?: any): AxiosPromise<void> {\n            return ApiControllerApiFp(configuration).unregister(feeder, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ApiControllerApi - object-oriented interface\n * @export\n * @class ApiControllerApi\n * @extends {BaseAPI}\n */\nexport class ApiControllerApi extends BaseAPI {\n    /**\n     * \n     * @param {string} feeder \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public clear(feeder: string, options?: any) {\n        return ApiControllerApiFp(this.configuration).clear(feeder, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {FetchRequest} [fetchRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public fetch(fetchRequest?: FetchRequest, options?: any) {\n        return ApiControllerApiFp(this.configuration).fetch(fetchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} fieldId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public fetchFieldSuggestions(fieldId: string, options?: any) {\n        return ApiControllerApiFp(this.configuration).fetchFieldSuggestions(fieldId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public fetchSchema(options?: any) {\n        return ApiControllerApiFp(this.configuration).fetchSchema(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public get(options?: any) {\n        return ApiControllerApiFp(this.configuration).get(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {Array<string>} dashboardNames \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public getDashboards(dashboardNames: Array<string>, options?: any) {\n        return ApiControllerApiFp(this.configuration).getDashboards(dashboardNames, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {Array<string>} feeders \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public getOverview(feeders: Array<string>, options?: any) {\n        return ApiControllerApiFp(this.configuration).getOverview(feeders, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} feeder \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public register(feeder: string, options?: any) {\n        return ApiControllerApiFp(this.configuration).register(feeder, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {ConfigurationOverview} [configurationOverview] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public setConf(configurationOverview?: ConfigurationOverview, options?: any) {\n        return ApiControllerApiFp(this.configuration).setConf(configurationOverview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} feeder \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public start(feeder: string, options?: any) {\n        return ApiControllerApiFp(this.configuration).start(feeder, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} feeder \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public stop(feeder: string, options?: any) {\n        return ApiControllerApiFp(this.configuration).stop(feeder, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} feeder \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiControllerApi\n     */\n    public unregister(feeder: string, options?: any) {\n        return ApiControllerApiFp(this.configuration).unregister(feeder, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n","// tslint:disable\n/**\n * OpenAPI definition\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://localhost:3333\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","import React from 'react';\nimport moment from 'moment'\n\nexport const  timeFormatter = (timestamp)=>{\n\n    var a = new Date(timestamp*1);\n    return moment(a).format(\"ddd,DD-MMM HH:mm:ss.SSS\");\n}\n\n\nvar xmlFormat = require('xml-formatter');\n\nexport const xmlFormatter = (xml,conf)=>{\n  // const xmlString = xmlFormat(xml,conf).replace(\">\",\"><br>\");\n  // return (\n  //   <div>{htmlDecode(xmlString)}</div>\n  // );\n  return (<pre style={{boxSizing:\"border-box\"}}>{formatXml(xml)}</pre>);\n}\n\nfunction formatXml(xml) {\n  var formatted = '';\n  var reg = /(>)(<)(\\/*)/g;\n  xml = xml.replace(reg, '$1\\r\\n$2$3');\n  var pad = 0;\n  xml.split('\\r\\n').forEach((node)=> {\n      var indent = 0;\n      if (node.match( /.+<\\/\\w[^>]*>$/ )) {\n          indent = 0;\n      } else if (node.match( /^<\\/\\w/ )) {\n          if (pad != 0) {\n              pad -= 1;\n          }\n      } else if (node.match( /^<\\w[^>]*[^\\/]>.*$/ )) {\n          indent = 1;\n      } else {\n          indent = 0;\n      }\n\n      var padding = '';\n      for (var i = 0; i < pad; i++) {\n          padding += '  ';\n      }\n\n      formatted += padding + node + '\\r\\n';\n      pad += indent;\n  });\n\n  return formatted;\n}","import React from 'react';\nimport ReactTable from 'react-table-v6'\nimport 'react-table-v6/react-table.css'\nimport Button from 'react-bootstrap/Button'\nimport { timeConverter } from '../formatters/formatters'\nimport { ApiControllerApiFactory, IFeederOverview } from '../api/gen/index';\nimport { Container } from 'react-bootstrap';\n\nexport default class Search extends React.Component {\n\n    apiClient = null;\n\n    constructor(props){\n        super(props)\n        this.state = {\n             isLive:false,\n             allFields:this.props.allFields,\n             initTimer:5000,\n             timer:3000\n        }\n\n        this.apiClient = new ApiControllerApiFactory();\n        this.toggleLive = this.toggleLive.bind(this)\n        this.poll = this.poll.bind(this)\n    }\n\n    pollVar=null\n\n    toggleLive(){\n        const nextState =  !this.state.isLive\n        this.setState({ isLive: nextState, timer:this.state.initTimer })\n        this.pollVar = nextState ? setInterval(this.poll,1000) : clearInterval(this.pollVar);\n    }\n\n    poll(){\n        var updTimer = this.state.timer;\n        if(updTimer==0){\n            this.props.fetch()\n            updTimer = this.state.initTimer\n        }else{\n            updTimer-=1000;\n        }\n\n        this.setState({timer:updTimer})\n    }\n\n    render(){\n        console.log(this.pollVar,\"pollVar\")\n        return (<form>\n            <Button variant=\"info\" onClick={this.props.fetch}>Search</Button>\n            &nbsp;\n            <label class=\"switch\">\n                            <input type=\"checkbox\" value={this.state.isLive} onChange={this.toggleLive} />\n                            <span class=\"slider round\"></span>\n                        </label>\n                        <span>{this.state.isLive ? `Reload in ${this.state.timer/1000}s` : \"\"}</span>\n          </form>)\n    }\n}\n\n\n\n\nfunction getFilterView(filter){\n\n}\n\nfunction getFilterEdit(filter){\n\n}","import React from 'react';\nimport ReactTable from 'react-table-v6'\nimport 'react-table-v6/react-table.css'\nimport Button from 'react-bootstrap/Button'\nimport { ApiControllerApiFactory, IFeederOverview } from '../api/gen/index';\nimport Search from './Search';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { timeFormatter, xmlFormatter } from '../formatters/formatters'\n// import DataGrid from 'react-data-grid';\n// import 'react-data-grid/dist/react-data-grid.css';\n\n\nexport default class Logview extends React.Component {\n\n  apiClient = null;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      logs: [],\n      search: {\n        page: 1,\n        pageSize: 100,\n        filters: []\n      },\n      selectedIndex: null,\n      selectedRow: null,\n      loading: false,\n      allFields: []\n    }\n\n    this.apiClient = new ApiControllerApiFactory();\n    this.fetch = this.fetch.bind(this);\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.apiClient.fetchSchema().then(\n      (response) => {\n        const payload = response.data;\n\n        let updState = payload.map(f => f);\n        this.setState({ allFields: updState })\n      },\n      (error) => {\n        console.log(\"ERROR fetching schema\", error)\n      });\n  }\n\n\n  componentWillUnmount() {\n\n  }\n\n  fetch() {\n    this.setState({ loading: true })\n    this.apiClient.fetch({\n      page: this.state.search.page,\n      pageSize: this.state.search.pageSize,\n      filters: this.state.search.filters\n    }).then(\n      (data) => {\n        if (!data.data.payload) {\n          this.setState({ loading: false })\n          return\n        }\n        this.setState({\n          logs: mapLogs(data.data.payload.results),\n          loading: false\n        }, () => {\n          //tODO: use proper dimensions and dynamically\n          console.log(this.state.logs.length,\"LOG LEN\")\n          document.getElementsByClassName(\"rt-tbody\").item(0).scrollTop = this.state.logs.length > 15 ? this.state.logs.length * 30 : 0;\n        })\n      }, (error) => {\n        this.setState({ loading: false })\n      }\n    )\n  }\n\n  render() {\n\n    const columns = [{\n      id: \"@timestamp\",\n      Header: 'Timestamp',\n      accessor: '@timestamp',\n      maxWidth: 150,\n      Cell: (props) => {return getFieldFormatter(\"@timestamp\", this.state.allFields)(props.row[\"@timestamp\"])}\n    },\n    {\n      id: \"@source\",\n      Header: 'Source',\n      accessor: \"@source\",\n      maxWidth: 100\n    }, {\n      id: \"@content\",\n      Header: 'Content',\n      accessor: \"@content\"\n    }\n    ]\n\n\n    const searchProps = {\n      fetch: this.fetch,\n      state: this.state,\n      allFields: this.state.allFields\n    }\n\n\n\n    const logViewMinWidth = this.state.selectedIndex ? '70%' : '100%';\n    return (\n      <Container fluid>\n        <Row style={{ backgroundColor: 'silver' }}>\n          <Col style={{ minWidth: '80%' }}>\n            &nbsp;\n          </Col>\n          <Col className=\"justify-content-right align-items-right\">\n\n            <Search {...searchProps} />\n\n          </Col>\n        </Row>\n\n        <Row>\n          <Col id=\"mainCol\" style={{ minWidth: { logViewMinWidth } }}>\n            <ReactTable\n              sortable={false}\n              showPagination={false}\n              pageSize={100}\n              data={this.state.logs}\n              columns={columns}\n              loading={this.state.loading}\n              style={\n                { height: window.innerHeight }\n              }\n              className=\"-striped -highlight\"\n              getTbodyProps={(A, B, C, D, E, F) => {\n                return {\n                  onScroll: (a, b, c, d, e, f) => {\n                    console.log(\"A\", A, B, C, D, E, F)\n                    console.log(\"a\", a, b, c, d, e, f)\n                  }\n                }\n              }}\n              getTrGroupProps={(state, rowInfo, column, instance) => {\n                if (rowInfo !== undefined) {\n                  const rowKey = rowInfo.original['@timestamp'] + rowInfo.original['@source']\n                  return {\n                    onClick: (e, handleOriginal) => {\n                      console.log(instance)\n                      if (this.state.selectedIndex === rowKey) {\n                        this.setState({\n                          selectedIndex: null,\n                          selectedRow: null\n                        })\n                      }\n                      else {\n                        this.setState({\n                          selectedIndex: rowKey,\n                          selectedRow: rowInfo.original\n                        })\n                      }\n                    },\n                    style: {\n                      cursor: 'pointer',\n                      background: rowKey === this.state.selectedIndex ? '#00afec' : 'white',\n                      color: rowKey === this.state.selectedIndex ? 'white' : 'black'\n                    }\n                  }\n                }\n              }\n              }\n            />\n          </Col>\n          <Col id=\"infoCol\" hidden={!this.state.selectedIndex}>\n            {\n              this.state.selectedRow != null ? getRowDetails(this.state.selectedRow, this.state.allFields) : null\n            }\n          </Col>\n        </Row>\n\n      </Container>)\n  }\n}\n\nfunction getRowDetails(row, allFields) {\n  return (<table border=\"5px\">\n    {\n      Object.keys(row).map(key => {\n        const formatter = getFieldFormatter(key, allFields);\n        let val = formatter ? formatter(row[key]) : row[key]\n        console.log(\"formatter for field\",formatter,key)\n        return [<tr><td>{key}</td><td width=\"100%\" height=\"100%\">{val}</td></tr>]\n      })\n    }\n  </table>)\n}\n\nfunction getFieldFormatter(fieldKey, allFields) {\n  const filter = allFields.filter(f => f.name === fieldKey);\n\n  if (filter.length > 0) {\n    const fType = filter[0].type;\n\n    if (fType === \"TIMESTAMP\") {\n      return timeFormatter\n    }\n\n    if (fType === \"XML\") {\n      return xmlFormatter\n    }\n  }\n\n  return (x)=>{return x}\n}\n\nfunction getFetchRequestFromState(state) {\n  return {\n    \"page\": 1,\n    \"pageSize\": 10,\n    \"select\": {},\n    \"filters\": [\n      {\n        \"fieldName\": \"@timestamp\",\n        \"op\": \"GT\",\n        \"value\": \"1234562134456\"\n      }\n    ]\n  }\n}\n\nfunction mapLogs(results) {\n\n  const logs = Object.keys(results).map(k => {\n    const values = results[k].values;\n    const log = {};\n\n    Object.keys(values).forEach(valkey => {\n      const v = values[valkey];\n      Object.keys(v).forEach(kv => {\n        const logObj = v[kv];\n        log[logObj.fn] = logObj.vl;\n      })\n    });\n    return log;\n  });\n  return logs;\n}","import React from 'react';\nimport ReactTable from 'react-table-v6'\nimport 'react-table-v6/react-table.css'\nimport { ApiControllerApiFactory, IFeederOverview } from '../api/gen/index';\nimport Button from 'react-bootstrap/Button'\n\nexport default class FeederView extends React.Component {\n\n    apiClient = null;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            feeders: []\n        }\n\n        this.getFeeders = this.getFeeders.bind(this);\n        this.mapFeeder = this.mapFeeder.bind(this);\n        this.start = this.start.bind(this);\n        this.stop = this.stop.bind(this);\n        this.unregister = this.unregister.bind(this);\n        this.clear = this.clear.bind(this);\n        this.apiClient = new ApiControllerApiFactory();\n    }\n\n    componentDidMount() {\n        this.pollVar = setInterval(this.getFeeders, 1000);\n    }\n\n\n    componentWillUnmount() {\n        clearInterval(this.pollVar);\n        this.pollVar = null;\n    }\n\n    getFeeders() {\n        this.apiClient.getOverview(\"\").then(\n            (response) => {\n                const data = response.data;\n                const updFeeders = Object.keys(data).map(key => {\n                    return this.mapFeeder(data[key]);\n                });\n                this.setState({ feeders: updFeeders });\n            })\n    }\n\n    mapFeeder(apiFeeder) {\n        return {\n            name: apiFeeder.name,\n            targetSeries: apiFeeder.targetSeries,\n            feederState: apiFeeder.feederState\n        }\n    }\n\n    start(e) {\n        this.apiClient.start(e).then((data) => {\n\n        }, (error) => {\n            console.log(\"ERROR\", error);\n        });\n    }\n\n    stop(e) {\n        this.apiClient.stop(e).then((data) => {\n\n        }, (error) => {\n            console.log(\"ERROR\", error);\n        });\n    }\n\n    unregister(e){\n        this.apiClient.unregister(e).then((data) => {\n\n        }, (error) => {\n            console.log(\"ERROR\", error);\n        });\n    }\n\n    clear(e){\n        this.apiClient.clear(e).then((data) => {\n\n        }, (error) => {\n            console.log(\"ERROR\", error);\n        });\n    }\n\n    render() {\n\n        const columns = [{\n            id: \"name\",\n            Header: 'Name (ID)',\n            accessor: 'name'\n        }, {\n            id: \"targetSeries\",\n            Header: 'Target Series',\n            accessor: \"targetSeries\"\n        }, {\n            id: 'feederState',\n            Header: 'Status',\n            accessor: 'feederState'\n        },\n        {\n            id: 'action',\n            accessor: 'feederState',\n            Cell: (props) => {\n                if (props.value === 'STOPPED') {\n                    return [<Button key=\"startBtn\" variant=\"success\" onClick={e => this.start(props.row.name)}>Start</Button>,\n                    <Button key=\"clearBtn\" variant=\"danger\" onClick={e => this.clear(props.row.name)}>Clear</Button>,\n                    <Button key=\"unregBtn\" variant=\"warning\" onClick={e => this.unregister(props.row.name)}>Unregister</Button>]\n                }else{\n                    return (<Button id=\"stopBtn\" variant=\"danger\" onClick={e => this.stop(props.row.name)}>Stop</Button>)\n                }\n            }\n        }\n        ]\n\n        return <ReactTable\n            showPagination={false}\n            data={this.state.feeders}\n            columns={columns}\n        />\n    }\n}\n","import React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport { Container, Row, Col } from 'react-bootstrap'\n\nexport class FormView extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            isEdit: false\n        }\n\n        this.onChange = this.onChange.bind(this)\n    }\n\n    onChange(id,key,e){\n        this.props.onChange(id,key,e.target.value);\n    }\n\n    render() {\n        const row = this.props.row;\n        const cols = this.props.cols;\n        const onSave = this.props.onSave;\n        return (\n            <Container fluid=\"md\" style={{width:\"100%\"}}>\n                <Row>\n                    <Col ></Col>\n                    <Col ></Col>\n                    <Col ></Col>\n                    <Col style={{ align: 'right' }}>\n                        <label class=\"switch\">\n                            <input type=\"checkbox\" value={this.state.isEdit} onChange={() => { this.setState({ isEdit: !this.state.isEdit }) }} />\n                            <span class=\"slider round\"></span>\n                        </label>\n                        <span>{this.state.isEdit ? \"Edit mode\" : \"View mode\"}</span>\n                    </Col>\n                </Row>\n                {\n                    cols.map(col => {\n                        const cell = row[col.id];\n                        return [<Row fluid=\"md\">\n                            {\n                                this.state.isEdit ?\n                                    getFormValuesWrapper(col.id, col.editor ? col.editor(cell) : getStandardCellEditor(cell,(e)=>this.onChange(row.name,col.id,e)))\n                                    :\n                                    getFormValuesWrapper(col.id, col.formatter ? col.formatter(cell) : getStandardCellFormat(cell))\n                            }\n                        </Row>]\n                    })\n                }\n            </Container>\n        )\n    }\n}\n\n\nfunction getStandardCellFormat(cell) {\n    if(typeof(cell)===\"boolean\"){\n        return getBooleanCellFormat(cell)\n    }\n    return cell;\n}\n\n\nfunction getStandardCellEditor(cell,onChange) {\n    if(typeof(cell)===\"boolean\"){\n        return getBooleanCellEditor(cell,onChange)\n    }\n    return (<input width=\"box-sizing: border-box;\" type=\"text\" value={cell} onChange={(e)=>onChange(e)}/>);\n}\n\n\nfunction getBooleanCellFormat(cell) {\n    return cell ? 'YES' : 'NO';\n}\n\n\nfunction getBooleanCellEditor(cell,onChange) {\n    return (<input width=\"box-sizing: border-box;\" type=\"text\" value={cell} onChange={(e)=>onChange(e)}/>);\n}\n\n\nfunction getFormValuesWrapper(label, content) {\n    return (<fieldset class=\"scheduler-border\" width=\"box-sizing: border-box;%\">\n        <legend class=\"scheduler-border\">{label}</legend>\n        <div class=\"control-group\">\n            <div class=\"controls bootstrap-timepicker\">\n                {content}\n            </div>\n        </div>\n    </fieldset>)\n}","import React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport { Container, Row, Col } from 'react-bootstrap'\nimport { FormView } from './FormView'\n\n\n\nexport default class View extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.save = this.save.bind(this);\n        this.change = this.change.bind(this);\n        this.clone = this.clone.bind(this);\n        this.delete = this.delete.bind(this);\n    }\n\n   change(id,key,value){\n       this.props.onChange(this.props.id,id,key,value);\n   }\n\n    save(obj) {\n        console.log(\"on save called....\",this.props.title,obj)\n    }\n\n    delete() {\n\n    }\n\n    clone() {\n\n    }\n\n    render() {\n        const tProps = this.props;\n        return (\n            <Container fluid>\n                <Row>\n                    <Col style={{ width: \"100%\" }}>\n                        <h1>{tProps.title}</h1>\n                        <BootstrapTable data={tProps.rows} expandComponent={(row) => getExpandComponent(row,tProps,this.change,this.save)} expandableRow={() => { return true }}>\n                            {\n                                tProps.cols.map(col => {\n                                    if (col.isHead) {\n                                        return [<TableHeaderColumn\n                                            isKey={col.isKey}\n                                            width={col.isKey ? 500 : undefined}\n                                            dataField={col.id}\n                                            dataFormat={col.formatter ? (cell, row) => col.formatter(cell) : undefined}\n                                            dataSort={col.isSortable}\n                                            sorta\n                                        >{col.id}</TableHeaderColumn>]\n                                    }\n                                })\n                            }\n                            <TableHeaderColumn width=\"200px\" dataFormat={(cell, row, onClone, onDelete) => actionFormatter(cell, row, this.clone, this.delete)}></TableHeaderColumn>\n                        </BootstrapTable>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\n\nfunction getExpandComponent(row,tProps,onChange,onSave) {    \n    const formViewProps = {\n        row: row,\n        cols: tProps.cols,\n        onChange: onChange,\n        onSave:onSave\n    }\n    return (\n        formViewProps.cols ? <FormView {...formViewProps} /> : null\n    )\n}\n\nfunction actionFormatter(cell, row, onClone, onDelete) {\n    return (\n        <div>\n            <a href=\"#\" onClick={(e) => onClone(row)}>Clone</a> | <a href=\"#\" onClick={(e) => onDelete(row)}>Delete</a> <span title={\"Total uses of element in the schema: \" + row.count}>({row.count})</span>\n        </div>\n    )\n}\n\n\n\n\nclass SelectorEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        console.log(\"multi props\", props)\n        this.state = {\n            selected: this.props.defaultValue\n        }\n    }\n\n\n    onChange(e) {\n        console.log(e);\n        this.state.selected.push(e.target.id);\n    }\n\n    render() {\n        const dataSource = [];\n        if (this.props.dataSource) {\n            dataSource = this.props.dataSource;\n        }\n        return (\n            <select name={1} id=\"multiSelector\" multiple={true} onChange={this.onChange}>\n                {\n                    dataSource.map(m => {\n                        const isSelected = this.state.selected.filter(f => f.name === m.name);\n                        return [<option selected={isSelected} value={m.name}>{m.name}</option>]\n                    })\n                }\n            </select>\n        )\n    }\n}\n\n","import React from 'react';\n//import {apiCall, getConfOveriview, saveConfOverview } from '../api/client';\nimport Button from 'react-bootstrap/Button'\nimport { ApiControllerApiFactory, FeederSchema } from '../../api/gen/index';\nimport { Tabs, Tab, TabPanel, TabList } from 'react-tabs';\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\nimport { Container, Row, Col } from 'react-bootstrap'\nimport View from './View'\n\nexport default class SchemaConfView extends React.Component {\n\n    laganaApi = null;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            changed: false,\n            feeders: {},\n            readers: {},\n            fields: {},\n            matchers: {},\n            uses: {}\n        };\n\n        this.getSchema = this.getSchema.bind(this);\n        this.saveItem = this.saveItem.bind(this);\n        this.change = this.change.bind(this);\n        this.saveSchema = this.saveSchema.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n        this.laganaApi = new ApiControllerApiFactory();\n    }\n\n\n    componentDidMount() {\n        this.getSchema();\n    }\n\n    async getSchema() {\n        this.laganaApi.get().then(\n            (data) => {\n                const payload = data.data.reapSchema;\n                let updState = {\n                    changed: false,\n                    feeders: {},\n                    readers: {},\n                    fields: {},\n                    matchers: {},\n                    uses: {}\n                }\n                Object.keys(payload).forEach(key => {\n                    const items = payload[key];\n                    items.forEach(item => {\n                        updState[key][item.name] = item;\n                        const useKey = key + \"_\" + item.name;\n                        if (!updState['uses'][useKey]) {\n                            updState['uses'][useKey] = 0;\n                        }\n                        updState['uses'][useKey] += 1;\n                    })\n                });\n                console.log(\"updState\", updState)\n                this.setState(updState)\n            });\n    }\n\n    saveSchema() {\n        this.laganaApi.setConf({\n            feeders: this.state.feeders,\n            readers: this.state.readers,\n            fields: this.state.fields,\n            matchers: this.state.matchers\n        })\n    }\n\n    saveItem(type, key, obj) {\n        console.log(\"saveItem \", type, key, obj)\n        const updState = Object.assign({}, this.state);\n        const existing = updState[type]\n        existing[key] = obj;\n        updState[\"changed\"] = true;\n        console.log(updState, \" UPD STATE\")\n        this.setState(updState)\n    }\n\n    deleteItem(type, key) {\n        console.log(\"going to delete>\", type, key)\n    }\n\n    change(objGroup, objKey, fieldKey, objVal) {\n        console.log(\"CHANGE: \", objGroup, objKey, fieldKey, objVal)\n        let updState = Object.assign({}, this.state[objGroup])\n        let item = Object.assign({}, updState[objKey])\n        item[fieldKey] = objVal;\n        updState[objKey] = item;\n        this.setState({\n            \"changed\": true,\n            updState\n        });\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <Tabs>\n                    <TabList>\n                        <Tab>Feeders</Tab>\n                        <Tab>Matchers</Tab>\n                        <Tab>Readers</Tab>\n                        <Tab>Fields</Tab>\n                    </TabList>\n                    <TabPanel forceRender={true}>{getFeeders(this.props, this.state.feeders,this.state.readers,this.state.matchers, this.change, this.saveItem, this.deleteItem)}</TabPanel>\n                    <TabPanel>{getMatchers(this.props, this.state.matchers, this.change, this.saveItem, this.deleteItem)}</TabPanel>\n                    <TabPanel>ok</TabPanel>\n                    <TabPanel>ok</TabPanel>\n                </Tabs>\n                <Row>\n                    <Col></Col>\n                    <Col>\n                        <Button variant=\"success\" onClick={this.saveSchema} disabled={!this.state.changed}>Save</Button>\n                    </Col>\n                    <Col></Col>\n                </Row>\n\n            </Container>\n\n        )\n    }\n}\n\n\nfunction getMatchers(props, matchers, onChange, onSave, onDelete) {\n\n    const tProps = {\n        id: \"matchers\",\n        title: \"Matchers\",\n        key: \"name\",\n        cols: [\n            {\n                id: \"name\",\n                isKey: true,\n                isHead: true,\n                isSortable:true\n            },\n            {\n                id: \"description\",\n                isHead: true\n            },\n            {\n                id: \"field\",\n                isHead: true\n            },\n            {\n                id: \"regex\"\n            },\n            {\n                id: \"formatMatchValue\"\n            },\n            {\n                id: \"defaultMatchValue\"\n            }, {\n                id: \"multilineAndInvert\"\n            },\n            {\n                id: \"allOf\",\n                formatter: (obj) => { return multiFormatter(obj) },\n                editor: (row) => { },\n                isHead: true\n            },\n            {\n                id: \"anyOf\",\n                formatter: (obj) => { return multiFormatter(obj) },\n                editor: (row) => { },\n            }\n        ],\n        rows: Object.keys(matchers).map(f => { return matchers[f] }),\n        onSave: onSave,\n        onChange: onChange,\n        onDelete: onDelete\n    }\n    return (<View {...tProps} />)\n}\n\nfunction getFeeders(props,feeders, matchers,readers, onChange, onSave, onDelete) {\n\n    const matchersDs = Object.keys(matchers).map(f => { return matchers[f].name });\n    const readersDs = Object.keys(readers).map(f => { return readers[f].name });\n    const tProps = {\n        id: \"feeders\",\n        title: \"Feeders\",\n        key: \"name\",\n        cols: [\n            {\n                id: \"name\",\n                isKey: true,\n                isHead: true,\n                isSortable:true\n            },\n            {\n                id: \"description\",\n                isHead: true\n            },\n            {\n                id: \"targetSystem\",\n                isHead: true\n            },\n            {\n                id: \"isRegistered\",\n                isHead: true\n            },\n            {\n                id: \"reader\",\n                // formatter: (obj) => { return multiFormatter(obj) },\n                editor: (cell,onChange) => { return multiEditor(cell,readersDs,false,onChange)},\n                isHead: true\n            },\n            {\n                id: \"matcher\",\n                // formatter: (obj) => { return multiFormatter(obj) },\n                editor: (cell,onChange) => { return multiEditor(cell,matchersDs,false,onChange)},\n                isHead:true\n            }\n        ],\n        rows: Object.keys(feeders).map(f => { return feeders[f] }),\n        onSave: onSave,\n        onChange: onChange,\n        onDelete: onDelete\n    }\n    return (<View {...tProps} />)\n}\n\nfunction multiFormatter(obj) {\n    return (<ul>\n\n        {\n            obj.map(t => {\n                return [<li><span class=\"tag\" background=\"red\">{t}</span></li>]\n            })\n        }\n\n    </ul>)\n}\n\n\nfunction multiEditor(obj,dataSource,isMulti,onChange){\n    return (\n        <select>\n            {\n                dataSource.map(o=>{\n                return [<option value={o}>{o}</option>]\n                })\n            }\n        </select>\n    )\n}","import React from 'react';\nimport {Tabs,Tab,TabPanel,TabList} from 'react-tabs';\nimport './App.css';\nimport './xmlFormatter.css';\nimport 'react-tabs/style/react-tabs.css';\nimport Logview from './views/Logview';\nimport FeederView from './views/FeederView';\nimport SchemaConfView from './views/schema/SchemaConfView';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App(){\n\n    return ( <Tabs>\n      <TabList>\n        <Tab>Logs</Tab>\n        <Tab>Feeder Status</Tab>\n        <Tab>Configuration</Tab>\n      </TabList>\n      <TabPanel forceRender><Logview/></TabPanel>\n      <TabPanel><FeederView/></TabPanel>\n      <TabPanel><SchemaConfView/></TabPanel>\n    </Tabs>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}